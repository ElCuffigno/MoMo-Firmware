#!/usr/bin/env python
#pcbtool
#A program for creating BOMs, gerbers and assembly drawings from annotated EAGLE circuit board diagrams.

import sys
import os.path

sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'python_modules'))

import cmdln
from colorama import init, Fore, Style
from momo_utilities.paths import MomoPaths
from pybom import board

init()

class PCBTool(cmdln.Cmdln):
	name = 'pcbtool'
	def __init__(self):
		self.paths = MomoPaths()
		self.get_identifiers()

		cmdln.Cmdln.__init__(self)

	def do_list(self, subcmd, opts):
		"""
		List all known PCB board ids that can be used with this program and the .brd files that they correspond to.
		"""
		brds = self.paths.select(self.paths.pcb, filter=lambda x, y, z: z == '' or z == '.brd', include_dirs=True)

		print "Listing all known board ids under <momo_root>/pcb directory"
		print "You may specify any of these ids to select the .brd file shown"
		print "\nBoards:"
		for id, path in sorted(self.ids.iteritems(), key=lambda x:x[0]):
			print Fore.BLUE + "%s:" % id + Style.RESET_ALL + " '%s'" % os.path.relpath(path, start=self.paths.pcb)

		print ""

	@cmdln.option('-v', '--variant', action='append', default=None, help="Output path to store the BOM file, defaults to stdout")
	def do_info(self, subcmd, opts, id):
		"""
		Print information about the board file indicated.  
		If one or more variant is indicated, print detailed information about those
		assembly variants including the number of line items, etc. 
		all may be passed to --variant to indicate that all assembly variants should
		be printed in detail.
		"""

		brdfile = self.find_identifier(id)
		
		try:
			brd = board.Board.FromEagle(brdfile)
		except ValueError as e:
			self.error(str(e))

		print "Board Name: " + brd.partname
		print "Dimensions: %sx%s inches" % (brd.height, brd.width)
		print "Number of Assembly Variants: %d" % len(brd.variants)
		print "Assembly Variant Names:", brd.variants.keys()

		if len(brd.unknown) == 0:
			print Fore.GREEN + "All parts matched with part numbers" + Style.RESET_ALL
		else:
			print Fore.RED + "Unmatched parts exist:" + Style.RESET_ALL, brd.unknown

		if opts.variant is None:
			return

		if opts.variant[0] == 'all':
			opts.variant = brd.variants.keys()

		print "\n---Assembly Variant Details---\n"

		for var in opts.variant:
			if var not in brd.variants:
				print Fore.RED + "Variant %s does not exist" + Style.RESET_ALL

			lines = len (brd.variants[var])
			items = sum([len(x) for x in brd.variants[var]])

			print "%s" % var
			print "Distinct BOM Lines: %d" % lines
			print "Total Part Count: %d" % items

	def build_outstream(self, opts):
		"""
		If -o was passed, open that file for writing, otherwise return stdout.  Return a bool indicating if the 
		caller should close the stream when finished.
		"""

		if opts.output is None:
			return (sys.stdout, False)

		try:
			stream = open(opts.output, "w")
		except IOError:
			print "Could not open output file %s for writing." % opts.output
			sys.exit(1)

		return (stream, True)

	def get_identifiers(self):
		ids = self.paths.select(self.paths.pcb, filter=lambda x, y, z: z == '.brd')
		
		#Get all of the parent directory names. If they only correspond to a single .brd file,
		#they can also be used as identifiers
		parent_dirs = map(lambda x: (os.path.basename(os.path.dirname(x)), x), ids)
		seen_dirs = set()
		ambig_dirs = set()

		for d in parent_dirs:			
			if d in seen_dirs:
				ambig_dirs.add(d[0])
			else:
				seen_dirs.add(d)

		valid_dirs = seen_dirs.difference(ambig_dirs)
		brd_ids = map(lambda x: (os.path.basename(x), x), ids)

		ids = valid_dirs | set(brd_ids)

		self.ids = {x[0]: x[1] for x in ids}
		self.ambiguous_ids = ambig_dirs

	def error(self, text):
		print Fore.READ + "Error Occurred" + Style.RESET_ALL
		print text
		sys.exit(1)

	def param_error(self, type, param, fix):
		"""
		Print an error message and then quit.  Print type: param.\nfix
		"""

		print Fore.RED + "%s: " % type + Style.RESET_ALL + "%s\n" % param + fix
		sys.exit(1)

	def find_identifier(self, id):
		"""
		Given a string that may correspond to either a .brd file name or a folder, find if there is an
		unambiguous way to return the correct .brd file corresponding to that id.
		"""

		#Check if id is a path that points to valid file
		if os.path.isfile(id):
			return id
		elif os.path.isfile(os.path.join(self.paths.pcb, id)):
			return os.path.join(self.paths.pcb, id)

		if id in self.ambiguous_ids:
			self.param_error("Ambiguous Board Name Passed", id, "Try specifying the .brd file name directly or use pcbtool list to see valid identifiers.")

		if id not in self.ids:
			self.param_error("Unknown Board Name Passed", id, "Specify either the .brd file name or its parent directory if not ambiguous. You can also specify either an (absolute or relative from cwd) path to a .brd file or a relative path from <momo_root>/pcb")

		return self.ids[id]


if __name__ == "__main__":
	pcbtool = PCBTool()
	sys.exit(pcbtool.main())